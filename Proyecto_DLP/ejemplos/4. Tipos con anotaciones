/*
Test para probar la Fase de Comprobación de Tipos

COMPROBACION: El compilador del alumno debe detectar todos los errores indicados en los comentarios.

ADVERTENCIA: Hay algunos errores que producen otros errores derivados.

Por ejemplo:

	print juan + anton;	// suma de dos estructuras 

Lo anterior produce el error de que se están sumando dos expresiones de tipos no simples y además
puede producir el error de que la expresión a imprimir tampoco es de tipo simple (al no quedar
un tipo simple asociado a la suma al no haberse podido calcular su tipo).
Estos errores derivados son normales y no es necesario intentar suprimirlos. 

NOTA: Es posible que el alumno deba adaptar ligeramente la sintaxis del lenguaje si no coincide
con la del lenguaje que le corresponde.
*/

struct Persona {
	edad:int;
	meses:[12] int;
};

var juan:Persona;
var anton:Persona;

g():Persona {					// [29:1] Retorno de tipo no simple

}

f(a:[10] int) {					// [33:1] Los parametros de una funcion debe ser de tipo primitivo: a
	return 25;					// [34:9] Tipo de retorno no coincide
}

h():int {
	return 5.6;					// [38:9] Tipo de retorno no coincide
}

j(a:int, b:float):float {		// [41:1] Los return deben tener un valor de retorno
	h(2);						// [42:2] Numero de argumentos incorrecto
	return;
}

main() {
	var i:int;
	var f:float;
	var v:[10]int;

	if(2.5) { }					// [51:5] La condicion debe ser de tipo entero
	if (i) { }
	
	while(juan) { }				// [54:8] La condicion debe ser de tipo entero
	while (i) {}
	
	5 = 6; 						// [57:2] Valor de la izquierda no modificable
	i = f; 						// [58:2] Valores de distinto tipo
	juan = anton; 				// [59:2] Valor de la izquierda debe ser simple

	read juan;					// [61:7] Debe ser un tipo simple
	read 35;					// [62:7] Debe ser modificable
	read i;
	
	print juan; 				// [65:8] Solo se pueden imprimir tipos simples
	print f / 2.5;
	
	j(12, 12.5);
	j(12, 12); 					// [69:2] Tipo de los parametros no coincide
	j(12);						// [70:2] Numero de argumentos incorrecto
	j(12, 12.5, 4); 			// [71:2] Numero de argumentos incorrecto
	
	print main();				// [73:8] No tiene tipo de retorno
	print j(12, 12.5);
	print j(12, 12); 			// [75:8] Tipo de los parametros no coincide
	print j(12);				// [76:8] Numero de argumentos incorrecto
	print j(12, 12.5, 4); 		// [77:8] Numero de argumentos incorrecto

	print juan + anton;			// [79:8] Deben ser tipos simples [79:8] Solo se pueden imprimir tipos simples
	print 2.5 * 2;				// [80:8] Valores de distinto tipo
	print i - 2;

	print 2.5 && f;				// [83:8] Deben ser entero
	print 2 || i;
	
	print juan > anton;			// [86:8] Deben ser tipos simples [86:8] Solo se pueden imprimir tipos simples
	print 2.5 < 2;				// [87:8] Valores de distinto tipo
	print i == 2;
	
	print cast<int>(2.5) + i;
	print cast<Persona>(2.5);	// [91:13] Solo se pueden imprimir tipos simples
	print cast<int>(juan);		// [92:18] Se debe convertira un tipo simple
	print cast<float>(2.5);		// [93:20] No se pueden convertir si son del mismo tipo
	
	
	print juan[5];				// [96:8] Debe ser tipo array
	print 2[5];					// [97:8] Debe ser tipo array
	print v[5.0];				// [98:8] Debe ser indice entero
	v[5] = 5;
	print v[i+2];
	
	print juan.edad;
	print 5.edad;	// Se requiere tipo struct
	print juan.nombre; // Campo no definido
	
}