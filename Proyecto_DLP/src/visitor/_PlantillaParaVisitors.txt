/**
 * @generated VGen (for ANTLR) 1.4.0
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Program { List<Bloque> bloque; }
	public Object visit(Program node, Object param) {

		// super.visit(node, param);

		if (node.getBloque() != null)
			for (Bloque child : node.getBloque())
				child.accept(this, param);

		return null;
	}

	//	class Definicion_variable_global { String nombre;  Tipo tipo; }
	public Object visit(Definicion_variable_global node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class Struct { String nombre;  List<Definicion_campo_struct> definicion_campo_struct; }
	public Object visit(Struct node, Object param) {

		// super.visit(node, param);

		if (node.getDefinicion_campo_struct() != null)
			for (Definicion_campo_struct child : node.getDefinicion_campo_struct())
				child.accept(this, param);

		return null;
	}

	//	class Definicion_campo_struct { String nombre;  Tipo tipo; }
	public Object visit(Definicion_campo_struct node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class Funcion { String nombre;  List<Parametro> parametros;  List<Tipo> retorno;  List<Definicion_variable_local> locales;  List<Sentencia> sentencias; }
	public Object visit(Funcion node, Object param) {

		// super.visit(node, param);

		if (node.getParametros() != null)
			for (Parametro child : node.getParametros())
				child.accept(this, param);

		if (node.getRetorno() != null)
			for (Tipo child : node.getRetorno())
				child.accept(this, param);

		if (node.getLocales() != null)
			for (Definicion_variable_local child : node.getLocales())
				child.accept(this, param);

		if (node.getSentencias() != null)
			for (Sentencia child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class Definicion_variable_local { String nombre;  Tipo tipo; }
	public Object visit(Definicion_variable_local node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class Parametro { String nombre;  Tipo tipo; }
	public Object visit(Parametro node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class Sentencia_asignacion { Expr izquierda;  Expr derecha; }
	public Object visit(Sentencia_asignacion node, Object param) {

		// super.visit(node, param);

		if (node.getIzquierda() != null)
			node.getIzquierda().accept(this, param);

		if (node.getDerecha() != null)
			node.getDerecha().accept(this, param);

		return null;
	}

	//	class Sentencia_print { Expr expresiones; }
	public Object visit(Sentencia_print node, Object param) {

		// super.visit(node, param);

		if (node.getExpresiones() != null)
			node.getExpresiones().accept(this, param);

		return null;
	}

	//	class Sentencia_read { Expr expresiones; }
	public Object visit(Sentencia_read node, Object param) {

		// super.visit(node, param);

		if (node.getExpresiones() != null)
			node.getExpresiones().accept(this, param);

		return null;
	}

	//	class Sentencia_if { Expr condicion;  List<Sentencia> sentencias;  List<Sentencia> sino; }
	public Object visit(Sentencia_if node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getSentencias() != null)
			for (Sentencia child : node.getSentencias())
				child.accept(this, param);

		if (node.getSino() != null)
			for (Sentencia child : node.getSino())
				child.accept(this, param);

		return null;
	}

	//	class Sentencia_while { Expr condicion;  List<Sentencia> sentencias; }
	public Object visit(Sentencia_while node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getSentencias() != null)
			for (Sentencia child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class Sentencia_llamada_funcion { String nombre;  List<Expr> parametros; }
	public Object visit(Sentencia_llamada_funcion node, Object param) {

		// super.visit(node, param);

		if (node.getParametros() != null)
			for (Expr child : node.getParametros())
				child.accept(this, param);

		return null;
	}

	//	class Sentencia_return { Expr expresion; }
	public Object visit(Sentencia_return node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class TipoInt {  }
	public Object visit(TipoInt node, Object param) {
		return null;
	}

	//	class TipoFloat {  }
	public Object visit(TipoFloat node, Object param) {
		return null;
	}

	//	class TipoChar {  }
	public Object visit(TipoChar node, Object param) {
		return null;
	}

	//	class TipoVar { String string; }
	public Object visit(TipoVar node, Object param) {
		return null;
	}

	//	class TipoArray { String tamanio;  Tipo tipo; }
	public Object visit(TipoArray node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class TipoStruct {  }
	public Object visit(TipoStruct node, Object param) {
		return null;
	}

	//	class Expr_int { String string; }
	public Object visit(Expr_int node, Object param) {
		return null;
	}

	//	class Expr_real { String string; }
	public Object visit(Expr_real node, Object param) {
		return null;
	}

	//	class Expr_char { String string; }
	public Object visit(Expr_char node, Object param) {
		return null;
	}

	//	class Expr_ident { String string; }
	public Object visit(Expr_ident node, Object param) {
		return null;
	}

	//	class Expr_binaria { Expr izquierda;  Operador operador;  Expr derecha; }
	public Object visit(Expr_binaria node, Object param) {

		// super.visit(node, param);

		if (node.getIzquierda() != null)
			node.getIzquierda().accept(this, param);

		if (node.getOperador() != null)
			node.getOperador().accept(this, param);

		if (node.getDerecha() != null)
			node.getDerecha().accept(this, param);

		return null;
	}

	//	class Expr_vector { Expr fuera;  Expr dentro; }
	public Object visit(Expr_vector node, Object param) {

		// super.visit(node, param);

		if (node.getFuera() != null)
			node.getFuera().accept(this, param);

		if (node.getDentro() != null)
			node.getDentro().accept(this, param);

		return null;
	}

	//	class Expr_punto { Expr izquierda;  Expr derecha; }
	public Object visit(Expr_punto node, Object param) {

		// super.visit(node, param);

		if (node.getIzquierda() != null)
			node.getIzquierda().accept(this, param);

		if (node.getDerecha() != null)
			node.getDerecha().accept(this, param);

		return null;
	}

	//	class Expr_parentesis { Expr expr; }
	public Object visit(Expr_parentesis node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class Expr_cast { Tipo tipo_convertido;  Expr expr; }
	public Object visit(Expr_cast node, Object param) {

		// super.visit(node, param);

		if (node.getTipo_convertido() != null)
			node.getTipo_convertido().accept(this, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class Expr_llamada_funcion { String nombre;  List<Expr> parametros; }
	public Object visit(Expr_llamada_funcion node, Object param) {

		// super.visit(node, param);

		if (node.getParametros() != null)
			for (Expr child : node.getParametros())
				child.accept(this, param);

		return null;
	}

	//	class Operador_aritmetico { String string; }
	public Object visit(Operador_aritmetico node, Object param) {
		return null;
	}

	//	class Operador_logico { String string; }
	public Object visit(Operador_logico node, Object param) {
		return null;
	}

	//	class Operador_booleano { String string; }
	public Object visit(Operador_booleano node, Object param) {
		return null;
	}
}
